#!/usr/bin/env bash
# change_passwords.sh
# Usage:
#   sudo ./change_passwords.sh         # apply changes
#   sudo ./change_passwords.sh --dry-run  # show actions without changing passwords
#
# Behavior:
#  - Local users: changed with chpasswd
#  - Domain users: attempted with samba-tool user setpassword (if present)
#  - Logs to /var/log/password_changes.log
#  - Exits non-zero on fatal errors

set -euo pipefail

LOGFILE="/var/log/password_changes.log"
DRY_RUN=0

if [[ "$(id -u)" -ne 0 ]]; then
  echo "ERROR: must run as root. sudo required." >&2
  exit 2
fi

# Simple logger
log() {
  local ts msg
  ts="$(date -Iseconds)"
  msg="$1"
  echo "[$ts] $msg" | tee -a "$LOGFILE"
}

# Check args
if [[ "${1:-}" == "--dry-run" ]]; then
  DRY_RUN=1
  log "DRY RUN enabled — no changes will be made"
fi

# Map of users -> password and scope (Local or Domain)
# Format: username|scope|password
MAP=(
"AdmiralNelson|Domain|PerceiveEstimate32"
"quartermaster|Domain|PerceiveEstimate32"
"skulllord|Domain|PerceiveEstimate32"
"dreadpirate|Domain|PerceiveEstimate32"
"blackflag|Domain|PerceiveEstimate32"
"SaltyDog23|Local|AttachmentAuditor80"
"PlunderMate56|Local|AttachmentAuditor80"
"RumRider12|Local|AttachmentAuditor80"
"GoldTooth89|Local|AttachmentAuditor80"
"HighTide74|Local|AttachmentAuditor80"
"SeasScourge30|Local|AttachmentAuditor80"
"ParrotJack67|Local|AttachmentAuditor80"
"CannonDeck45|Local|AttachmentAuditor80"
"BarnacleBill98|Local|AttachmentAuditor80"
"StormBringer09|Local|AttachmentAuditor80"
)

SambaToolCmd="$(command -v samba-tool || true)"
if [[ -n "$SambaToolCmd" ]]; then
  log "samba-tool found at: $SambaToolCmd"
else
  log "samba-tool NOT found. Domain password changes will not be attempted automatically."
fi

# Function: change local password
change_local_password() {
  local user="$1" pass="$2"
  if getent passwd "$user" >/dev/null; then
    if [[ $DRY_RUN -eq 1 ]]; then
      log "DRY: would change LOCAL password for user: $user"
      return 0
    fi

    # Use chpasswd; supply "user:password"
    if echo "${user}:${pass}" | chpasswd; then
      log "SUCCESS: changed LOCAL password for user: $user"
      return 0
    else
      log "ERROR: failed to change LOCAL password for user: $user"
      return 1
    fi
  else
    log "NOTICE: local user $user not found on this system"
    return 2
  fi
}

# Function: change domain password via samba-tool (if present)
change_domain_password_samba() {
  local user="$1" pass="$2"
  if [[ -z "$SambaToolCmd" ]]; then
    log "SKIP: samba-tool not present — cannot change domain password for $user"
    return 2
  fi

  if [[ $DRY_RUN -eq 1 ]]; then
    log "DRY: would run: samba-tool user setpassword ${user} --newpassword='(redacted)'"
    return 0
  fi

  # Attempt change - samba-tool requires proper environment/privileges (run on DC or with domain admin)
  if "$SambaToolCmd" user setpassword "$user" --newpassword="$pass" 2>>"$LOGFILE"; then
    log "SUCCESS: domain password changed for $user via samba-tool"
    return 0
  else
    log "ERROR: samba-tool failed to change password for $user (check domain connectivity/privileges). See $LOGFILE for details."
    return 1
  fi
}

# Iterate map and act
log "Starting password change run. DRY_RUN=$DRY_RUN"

declare -i failures=0
declare -i domain_skips=0

for entry in "${MAP[@]}"; do
  IFS='|' read -r username scope password <<< "$entry"
  log "Processing: $username (scope: $scope)"

  if [[ "$scope" =~ ^[Ll]ocal$ ]]; then
    change_local_password "$username" "$password" || failures+=1
  else
    # Domain scope
    # First, check if user exists locally (maybe a cached domain user via nss/sssd)
    if getent passwd "$username" >/dev/null; then
      # If user resolves via getent but scope says Domain, we still attempt domain method first if samba-tool exists,
      # otherwise change local password (careful: may be cached account)
      if [[ -n "$SambaToolCmd" ]]; then
        change_domain_password_samba "$username" "$password" || failures+=1
      else
        # No samba-tool: we change local (best-effort) and log that domain change couldn't be attempted.
        log "WARNING: $username resolved locally but samba-tool missing; performing local password change as fallback."
        change_local_password "$username" "$password" || failures+=1
        domain_skips+=1
      fi
    else
      # Not present locally. Try samba-tool if available, otherwise skip and instruct admin.
      if [[ -n "$SambaToolCmd" ]]; then
        change_domain_password_samba "$username" "$password" || failures+=1
      else
        log "SKIP: $username appears to be a DOMAIN account and samba-tool is unavailable. Manual action required on AD: 'samba-tool user setpassword ${username} --newpassword=...' or use AD Users and Computers or run on a domain controller with domain admin rights."
        domain_skips+=1
      fi
    fi
  fi
done

log "Finished run. failures=$failures domain_skips=$domain_skips"

if [[ $failures -gt 0 ]]; then
  log "Completed with errors. Inspect $LOGFILE"
  exit 1
fi

if [[ $domain_skips -gt 0 ]]; then
  log "Some domain password changes were skipped because samba-tool was not present. See notes above for manual steps."
fi

log "All done."
exit 0
